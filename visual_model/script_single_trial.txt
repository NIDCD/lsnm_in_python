# The following is a short visual script (1300 timesteps = 6.5 seconds) to test or demonstrate
# LSNM in Python the first 200 timesteps = 1000 ms we do nothing. We assume 1 timestep = 5 ms, as
# in Horwitz et al (2005)

# now we present S1 by manually inserting it into the MGN module and leaving S1 there
# for 200 timesteps (1 second).
if t == 200:

    # turn attention to 'HI', as the input stimulus has just been presented
    modules['atts'][8][0][0][0] = 0.3

    # reset D1 prior to each trial
    for x in range(modules['efd1'][0]):
    	for y in range(modules['efd1'][1]):
	    modules['efd1'][8][x][y][0] = 0.2
	    
    # reset LGNS activity prior to stimulus presentation
    for x in range(modules['lgns'][0]):
        for y in range(modules['lgns'][1]):
            modules['lgns'][8][x][y][0] = 0.05

    # insert the inputs stimulus into LGN and see what happens
    # the following stimulus is an 'O' shape
    modules['lgns'][8][4][3][0] = 0.7
    modules['lgns'][8][4][4][0] = 0.7
    modules['lgns'][8][4][5][0] = 0.7
    modules['lgns'][8][4][6][0] = 0.7
    modules['lgns'][8][4][7][0] = 0.7
    modules['lgns'][8][4][8][0] = 0.7
    modules['lgns'][8][8][3][0] = 0.7
    modules['lgns'][8][8][4][0] = 0.7
    modules['lgns'][8][8][5][0] = 0.7
    modules['lgns'][8][8][6][0] = 0.7
    modules['lgns'][8][8][7][0] = 0.7
    modules['lgns'][8][8][8][0] = 0.7
    modules['lgns'][8][5][3][0] = 0.7
    modules['lgns'][8][6][3][0] = 0.7
    modules['lgns'][8][7][3][0] = 0.7
    modules['lgns'][8][5][8][0] = 0.7
    modules['lgns'][8][6][8][0] = 0.7
    modules['lgns'][8][7][8][0] = 0.7
                
# What follows is a DELAY period of 300 timesteps = 1.5 seconds 
if t == 400:

    # turn off input stimulus but leave small level of activity there
    for x in range(modules['lgns'][0]):
        for y in range(modules['lgns'][1]):
            modules['lgns'][8][x][y][0] = 0.05

# ... and now, present S2 for 200 timesteps (1 second) 
if t == 700:

    # reset LGN activity prior to stimulus presentation
    for x in range(modules['lgns'][0]):
        for y in range(modules['lgns'][1]):
            modules['lgns'][8][x][y][0] = 0.05

    # insert the inputs stimulus into LGN and see what happens
    # the following stimuuls is an 'O' shape
    modules['lgns'][8][4][3][0] = 0.7
    modules['lgns'][8][4][4][0] = 0.7
    modules['lgns'][8][4][5][0] = 0.7
    modules['lgns'][8][4][6][0] = 0.7
    modules['lgns'][8][4][7][0] = 0.7
    modules['lgns'][8][4][8][0] = 0.7
    modules['lgns'][8][8][3][0] = 0.7
    modules['lgns'][8][8][4][0] = 0.7
    modules['lgns'][8][8][5][0] = 0.7
    modules['lgns'][8][8][6][0] = 0.7
    modules['lgns'][8][8][7][0] = 0.7
    modules['lgns'][8][8][8][0] = 0.7
    modules['lgns'][8][5][3][0] = 0.7
    modules['lgns'][8][6][3][0] = 0.7
    modules['lgns'][8][7][3][0] = 0.7
    modules['lgns'][8][5][8][0] = 0.7
    modules['lgns'][8][6][8][0] = 0.7
    modules['lgns'][8][7][8][0] = 0.7
    
# what follows now is an intertrial interval of 400 timesteps (1 second), which includes
# the response period.
if t == 900:
             
    # reset D1 prior to each trial
    for x in range(modules['efd1'][0]):
    	for y in range(modules['efd1'][1]):
	    modules['efd1'][8][x][y][0] = 0.25
	    
    # turn off input stimulus but leave small level of activity there
    for x in range(modules['lgns'][0]):
        for y in range(modules['lgns'][1]):
            modules['lgns'][8][x][y][0] = 0.05

    # turn attention to 'LO', as the current trial has ended
    modules['atts'][8][0][0][0] = 0.05


